# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'swagapp' do
  config = use_native_modules!
  
  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'swagappTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
        # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    patch_unary_function_bug
    
    add_fonts_to_info_plist

  end
end




def add_fonts_to_info_plist

  puts "Adding react-native-vector-icons fonts to Info.plist..."

  require 'plist'

  # Path to Info.plist
  info_plist_path = './swagapp/Info.plist'

  # Path to the Fonts folder in node_modules
  fonts_path = '../node_modules/react-native-vector-icons/Fonts'

  # Read the existing Info.plist into a hash
  info_plist = Plist.parse_xml(`plutil -convert xml1 -o - #{info_plist_path}`)

  # Create an array to hold the font names
  ui_app_fonts = []

  # Loop through all .ttf files in the Fonts directory and add them to the array
  Dir.foreach(fonts_path) do |font_file|
    if font_file.end_with?('.ttf')
      ui_app_fonts.push(font_file)
    end
  end

  # Update the UIAppFonts key in the plist hash
  info_plist['UIAppFonts'] = ui_app_fonts

  # Write the updated plist back to Info.plist
  File.write(info_plist_path, info_plist.to_plist)
end




def patch_unary_function_bug
  # Define the path to hash.hpp relative to the Podfile
  file_path = File.join(Dir.pwd, 'Pods', 'boost', 'boost', 'container_hash', 'hash.hpp')
  puts "Doing s/unary_function/__unary_function/g in #{file_path}..."

  # Read the contents of hash.hpp
  file_contents = File.read(file_path)

  # Replace the relevant text
  modified_contents = file_contents.gsub(
    'struct hash_base : std::unary_function<T, std::size_t> {};',
    'struct hash_base : std::__unary_function<T, std::size_t> {};'
  )

  # Write the modified contents back to hash.hpp
  File.open(file_path, 'w') { |file| file.puts modified_contents }
end
